__________________________________________________

Clean-Code:

-- Lesbarkeit vor Kürze
    -> Code wird viel häufiger gelesen als geschrieben.

-- Sinnvolle Namen

-- Variablen, Funktionen, Klassen: sprechende Namen ("isVisible", nicht "iv")

-- Keine Abkürzungen, keine Mehrdeutigkeit

-- Kleine Funktionen / Methoden

-- Eine Funktion macht eine Sache

-- Möglichst kurz (maximal 14 Zeilen Code)

-- Klarer Aufbau

-- Einfache, logische Struktur

-- Keine unnötige Verschachtelung

-- Kommentare sparsam verwenden
    -> funktionen nach JS Doc Kommentierung, restlche Kommentare final löschen

-- Kommentare nur für „Warum“, nicht für „Was“
    -> Lieber selbsterklärenden Code schreiben

-- Keine Duplikate (DRY = Don’t Repeat Yourself)

-- Doppelte Logik vermeiden.

-- Gemeinsame Funktionen oder Komponenten nutzen.

-- Fehlerbehandlung ernst nehmen

-- Formatierung & Konsistenz

-- Einheitlicher Stil (Einrückungen, Leerzeilen, Klammern)
    -> siehe auch unten, unter BEM (Block - Element - Modifier)

-- Testbarkeit

-- Code so schreiben, dass er leicht testbar ist.


-- SOLID (Single Responsibility, Open/Closed, usw.).

-- KISS (Keep It Simple, Stupid).

-- YAGNI (You Ain’t Gonna Need It).
__________________________________________________

Block - Element - Modifier - Utility:

| Kategorie           | Beschreibung                                             | Kann allein stehen?            | Beispiel                                                                                                      |
| ------------------- | -------------------------------------------------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------------|
| **Block**           | Eigenständige, wiederverwendbare Einheit                 | Ja                             | <div class="card">...</div> <br> <nav class="menu">...</nav>                                                  |
| **Element (`__`)**  | Bestandteil eines Blocks, ohne Block sinnlos             | Nein                           | <div class="card__header">Titel</div> <br> <div class="menu__item">Eintrag</div>                              |
| **Modifier (`--`)** | Variante oder Zustand eines Blocks oder Elements         | Nur zusammen mit Block/Element | <div class="card card--highlighted">...</div> <br>  <div class="menu__item menu__item--active">Eintrag</div>  |
| **Utility**         | Universeller Helfer, unabhängig von Blocks oder Elements | Ja                             | <div class="flex text-center d-none">...</div>                                                                |


BEM - Beispiel (Dialog):

Block:
.dlg (Dialog-Lomponente)


Element (__) - snake_case mit doppelten Unterstrichen:
.dlg__content


Modifier (--) - kebab-case mit doppeltem minus:
.dlg--large (für eine große Variante eines Dialogs)
.dlg__content--highlighted (spezieller Style für das Content Element)


Utility-Klassen (-) - einfaches kebab-case:
.d-none
.content-wrapper


als HTML Beispiel mit CSS:

HTML:
<div class="dlg dlg--large d-none">
  <div class="dlg__header">Titel</div>
  <div class="dlg__content">Inhalt</div>
</div>

CSS:
.dlg {
  display: flex;
}
.dlg__content {
  padding: 1rem;
}
.dlg--large {
  max-width: 800px;
}
.d-none {
  display= none;
}


Faustregeln:

Block    = eigenständige Komponente (.card, .menu)

Element  = Teil eines Blocks, ohne Block sinnlos (.card__header)

Modifier = Variante eines Blocks oder Elements (.card--highlighted)

Utility  = universeller Helfer, unabhängig (.flex, .d-none)

__________________________________________________

Namenskonventionen CSS / HTML:

| Kategorie                     | Syntax-Beispiel                             | Zweck / Hinweis                                                                                                          |
| ----------------------------- | ------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
| **BEM – Block**               | .card, .menu, .dialog                       | Eigenständige Komponente                                                                                                 |
| **BEM – Element**             | .card__header, .menu__item                  | Bestandteil des Blocks, ohne Block sinnlos                                                                               |
| **BEM – Modifier**            | .card--highlighted, .menu__item--active     | Variante oder Zustand                                                                                                    |
| **Utility-Klasse**            | .d-none, .text-center, .max-w-1920          | Universelle Helfer, beschreiben direkt das Layout/Styling, **kebab-case**                                                |
| **ID**                        | #main-content, #user-profile                | Einzigartig pro Seite, am besten **kebab-case**                                                                          |
| **JS-Hook-Klasse** (optional) | .js-modal-trigger                           | Wenn du Klassen nur für JS brauchst, Prefix "js-" verwenden, damit klar ist, dass sie **nicht für Styling** gedacht sind |

__________________________________________________

Namenskonvention JavaScript:

Bennenung Funktionen immer CamelCase.